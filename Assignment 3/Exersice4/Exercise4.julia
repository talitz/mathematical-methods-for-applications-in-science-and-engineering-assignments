# Assignment 3
# Question 4

A = [2 -1 -1 0 0 0 0 0 0 0;-1 2 -1 0 0 0 0 0 0 0;-1 -1 3 -1 0 0 0 0 0 0;0 0 -1 4 -1 0 -1 0 0 -1;0 0 0 -1 4 -1 -1 -1 0 0;0 0 0 0 -1 3 -1 -1 0 0;0 0 0 -1 -1 -1 6 -1 -1 -1;0 0 0 0 -1 -1 -1 4 0 -1;0 0 0 0 0 0 -1 0 2 -1;0 0 0 -1 0 0 -1 -1 -1 4];
p = norm(A,1);

# Part b
# upper bound for the spectral radius of A by the 1-norm is
# 1 norm of matrix A, because we know that the norm of matrix
# is bigger equal to eigenvalues of the matrix, in particular , the spectral
# radius which is the largest absolute value of its eigenvalues.
# p = 12 >= max_eigval(A) = 7.0495;

#part c
println("------------------PART C------------------");
identity = Diagonal(ones(10));
temp = p*identity-A ;
max_vec_piA = [];
min_vec_A = [];
eigenvecs_A = eigvecs(A);
eigenvecs_pIA = eigvecs(temp);

# Eigenvector corresponding to the max eigenvalue
for i=91:100
  push!(max_vec_piA,eigenvecs_pIA[i]);
end

# Eigenvector corresponding to the min eigenvalue
for i=1:10
  push!(min_vec_A,eigenvecs_A[i]);
end

println("Eigenvector with minimal eigenvalue of A: ", min_vec_A);
println("");
println("Eigenvector with maximal eigenvalue of ρˆ*I − A: ",max_vec_piA);
println("");
# As we can see both of the vectors above are equal.


#part d
println("------------------PART D------------------");

eigen_vals_A = eigvals(A);
min_eigen_val_A = eigen_vals_A[1];
v = [1 1 1 1 1 1 1 1 1 1];
# A*v = min_eigen_A * V
println("A*V=", A*v');
println("min_eigen_val_A*V=", min_eigen_val_A*v);
# As we can see both of the vectors above are equal A*v = min_eigen_val_A * V


#part e
println("------------------PART E------------------");
result_vector = [];

x_0 = [1 5 2 1 1 3 1 1 -2 1 ] ;
x_k = x_0 ;
for i=1:100
  x_k1 = (p*identity-A)*x_k';
  push!(result_vector,norm(x_k1));
  x_k1 = x_k1 / norm(x_k1);
  x_k = x_k1';
end

println(" resulting vector: ", x_k);

############################### Graph convergence graph ##############################
using PyPlot
figure();
subplot(1,2,1);
y = result_vector;
semilogy(1 : 100,y,"-b");
title("power method converges to constans vector");
legend(("norm 2"));
xlabel("Iteration");
ylabel("Result Vector");


#part f
println("------------------PART F------------------");
result_vector2 = [];
n=10;
x_0 = 0.25*ones(n);
v = ones(n);
vvT = v*v';
x = x_0 ;
I = eye(10);

for i=1:100
  x = (p*(I- 0.1*vvT) - A)* x;
  push!(result_vector2,norm(x));
  x = x / norm(x);
end


println("The method Converges to: ");
println(x);

second_min_vec_A = [];
for i=11:20
  push!(second_min_vec_A,eigenvecs_A[i]);
end

println("The eigenvector with the second smallest eigenvalue of A: ");
println(second_min_vec_A);


subplot(1,2,2);
y = result_vector2;
semilogy(1 : 100,y,"-y");
title("Converge - Fider Vector");
legend(("norm 2"));
show();

# we can see that the method converges to the eigenvector
# with the second smallest eigenvalue of A.



# part g


###
