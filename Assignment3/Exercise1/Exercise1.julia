# Assignment 3
# Question 1
# Part a

#The Jacobi method
function JCB(A,b,x_0,epsilon,n_iter,w,xk_array)
x_k = x_0;
D= diagm(diag(A));
LU = A-D;
for k=1:n_iter
  norm_x_k = norm(x_k);
  LU_xk = LU*x_k;
  r = b-LU_xk;
  x_k1 = (1-w)*x_k + w*inv(D)*(b-LU*x_k)
  norm_xk_k1 = norm(x_k1-x_k);
  push!(xk_array, norm_xk_k1)
  if norm_xk_k1/norm_x_k < epsilon
    break;
  end
  x_k = x_k1;
 end
 return x_k, xk_array;
end

#The Gauss Seidel method
function GS(A,b,x,epsilon,n_iter,xk_array)
  r = b - A*x;
  n0 = norm(r);
  LD = tril(A);
  for k=1:n_iter
    x = x + LD\r;
    r = b - A*x;
    nr = norm(r);
    push!(xk_array, nr)
    if nr/n0 < epsilon
      break;
    end
   end
 return x,xk_array;
end

#The Successive Over Relaxation (SOR)
function SOR(A,b,x,epsilon,n_iter,w,xk_array)
  r = b - A*x;
  n0 = norm(r);
  LD = tril(A);
  D = diagm(diag(A));
  L = LD - D;
  for k=1:n_iter
    x = x + w*(D+w*L)\r;
    r = b - A*x;
    nr = norm(r);
    push!(xk_array, nr)
    if nr/n0 < epsilon
      break;
    end
   end
  return x,xk_array;
end

#part b

n = 256;
A = sprandn(n,n,2/n);
A = A'*A + 0.2*speye(n);
x_0 = zeros(256);
b = rand(n)
n_iter = 100;
epsilon = 0 ;
jacobi_weight_1 = 0.75;
jacobi_weight_2 = 0.5;
sor_weight_1 = 1.25;
sor_weight_2 = 1.5;
xk_sor_weight_1 = []; xk_sor_weight_2 = []; xk_jacobi_weight_1 = []; xk_jacobi_weight_2 = [];xk_gs = [];


#jacobi
x_jacob_w1 , xk_jacobi_weight_1 = JCB(A,b,x_0,epsilon,n_iter,jacobi_weight_1, xk_jacobi_weight_1);
x_jacob_w2, xk_jacobi_weight_2 = JCB(A,b,x_0,epsilon,n_iter,jacobi_weight_2, xk_jacobi_weight_2);
#Gauss Seidel
x_gs , xk_gs = GS(A,b,x_0,epsilon,n_iter,xk_gs);
#Successive Over Relaxation
sor_w1 , xk_sor_weight_1 = SOR(A,b,x_0,epsilon,n_iter,sor_weight_1,xk_sor_weight_1);
sor_w2 , xk_sor_weight_2= SOR(A,b,x_0,epsilon,n_iter,sor_weight_2,xk_sor_weight_2);


###############################  convergence graph ##############################

using PyPlot
figure();
subplot(1,2,1);
y = xk_sor_weight_1;
semilogy(1 : 100,y,"-b");
y = xk_sor_weight_2;
semilogy(1 : 100,y,"-r");
y = xk_jacobi_weight_1;
semilogy(1 : 100,y,"-g");
y = xk_jacobi_weight_2;
semilogy(1 : 100,y,"-y");
#y = xk_gs;
#semilogy(1 : 10,y,"-y");

title("Convergence Graph ");
legend(("SOR 1.25", "SOR 1.5", "JACOBI 0.75", "JACOBI 0.5"));
xlabel("ITERATION");
ylabel("Norm(A*x_k - b)");

println("sor w1: ", xk_sor_weight_1);
for k=0:99
  index = 100 - k ;
  xk_sor_weight_1[index] = xk_sor_weight_1[index]/xk_sor_weight_1[index-1];
  xk_sor_weight_2[index] = xk_sor_weight_2[index]/xk_sor_weight_2[index-1];
  xk_jacobi_weight_1[index] = xk_jacobi_weight_1[index]/xk_jacobi_weight_1[index-1];
  xk_jacobi_weight_2[index] = xk_jacobi_weight_2[index]/xk_jacobi_weight_2[index-1];
  println("k = ", k);
  println("index = " , index);
end
println("sor w1 after : ", xk_sor_weight_1);

subplot(1,2,2);
y = xk_sor_weight_1;
semilogy(1 : 100,y,"-b");
y = xk_sor_weight_2;
semilogy(1 : 100,y,"-r");
y = xk_jacobi_weight_1;
semilogy(1 : 100,y,"-g");
y = xk_jacobi_weight_2;
semilogy(1 : 100,y,"-y");

title("Convergence factor");
legend(("SOR 1.25", "SOR 1.5", "JACOBI 0.75", "JACOBI 0.5"));
xlabel("ITERATION");
ylabel("Norm(A*x_k - b)/Norm(A*x_k-1 - b)");
show();
